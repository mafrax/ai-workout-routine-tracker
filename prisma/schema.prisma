// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        BigInt   @id @default(autoincrement())
  email     String?  @unique
  name      String?
  picture   String?  // Profile picture URL from OAuth

  // OAuth fields
  googleId  String?  @unique @map("google_id")
  provider  String?  // 'google', 'facebook', etc.

  // Profile fields
  age                  Int?
  weight               Float?
  height               Float?
  fitnessLevel         String?   @map("fitness_level")
  goals                String?   // JSON array of strings
  availableEquipment   String?   @map("available_equipment") // JSON array of strings
  bodyweightExercises  String?   @map("bodyweight_exercises") // JSON array of {name: string, maxReps: number}

  createdAt DateTime @default(now()) @map("created_at")
  lastLogin DateTime? @map("last_login")

  // Relations
  dailyTasks     DailyTask[]
  telegramConfig TelegramConfig?
  workoutPlans   WorkoutPlan[]
  workoutSessions WorkoutSession[]

  @@map("users")
}

model DailyTask {
  id          BigInt    @id @default(autoincrement())
  userId      BigInt    @map("user_id")
  title       String
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now()) @map("created_at")
  lastResetAt DateTime? @map("last_reset_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("daily_tasks")
}

model TelegramConfig {
  id                    BigInt    @id @default(autoincrement())
  userId                BigInt    @unique @map("user_id")
  botToken              String?   @map("bot_token")
  chatId                String?   @map("chat_id")
  dailyTasksStartHour   Int       @default(9) @map("daily_tasks_start_hour")
  lastTaskReminderSent  DateTime? @map("last_task_reminder_sent")
  createdAt             DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("telegram_config")
}

model WorkoutPlan {
  id                   BigInt           @id @default(autoincrement())
  userId               BigInt           @map("user_id")
  name                 String
  planDetails          String?          @map("plan_details")
  isActive             Boolean          @default(false) @map("is_active")
  isArchived           Boolean          @default(false) @map("is_archived")
  completedWorkouts    String?          @map("completed_workouts") // JSON array
  telegramPreviewHour  Int?             @map("telegram_preview_hour")
  createdAt            DateTime         @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutSessions WorkoutSession[]

  @@map("workout_plans")
}

model WorkoutSession {
  id             BigInt    @id @default(autoincrement())
  userId         BigInt    @map("user_id")
  planId         BigInt?   @map("plan_id")
  dayNumber      Int?      @map("day_number")
  sessionDate    String    @map("session_date") // Stored as string for compatibility
  durationMinutes Int?     @map("duration_minutes")
  completionRate Float?    @map("completion_rate")
  notes          String?
  createdAt      DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan WorkoutPlan? @relation(fields: [planId], references: [id], onDelete: SetNull)

  @@map("workout_sessions")
}

model ConversationHistory {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @map("user_id")
  message   String
  response  String
  timestamp DateTime @default(now())
  createdAt DateTime @default(now()) @map("created_at")

  @@map("conversation_history")
}